
services:
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    restart: always
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_METRIC_REPORTERS=io.confluent.metrics.reporter.ConfluentMetricsReporter
      - KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE=false
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - '9092:9092'
    networks:
      - kafka-network
    volumes:
      - 'kafka_data_1:/bitnami/kafka/data'

  twitch-chat-stats:
    image: 'michaelfioretti/twitch-chat-stats:latest'
    container_name: twitch-chat-stats
    restart: always
    networks:
      - kafka-network
    secrets:
      - kafka_brokers
      - twitch_client_id
      - twitch_client_secret
    environment:
      - KAFKA_BROKERS_FILE=/run/secrets/kafka_brokers
      - TWITCH_CLIENT_ID_FILE=/run/secrets/twitch_client_id
      - TWITCH_CLIENT_SECRET_FILE=/run/secrets/twitch_client_secret
    depends_on:
      - kafka

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 twitch-chat-stats

secrets:
  kafka_brokers:
    file: ./secrets/kafka_brokers.txt
  twitch_client_id:
    file: ./secrets/twitch_client_id.txt
  twitch_client_secret:
    file: ./secrets/twitch_client_secret.txt

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka_data_1:
    driver: local
